@page "/Accounts/Register"

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _nav
@inject IAccountService _account

<h3>Register</h3>

<div class="row">
    <div class="row-cols-3"></div>
    <div class="row-cols-6">
        <EditForm Enhance Model="_model" OnValidSubmit="SubmitASync">
            <AntiforgeryToken />
            <div class="form-group mb-1">
               <label class="form-label">Email</label>
                <input class="form-control" @bind="_model.Email" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >UserName</label>
                <input class="form-control" @bind="@_model.UserName" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >Gender</label>
                <input class="form-check" @bind="@_model.Gender" type="checkbox" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >Password</label>
                <input class="form-control" @bind="_model.Password" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >ConfirmedPassword</label>
                <input class="form-control" @bind="_model.ConfirmedPassword" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" for="@_model.BirthDate">BirthDate</label>
                <input class="form-check" @bind="@_model.BirthDate" type="datetime" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" for="@_model.Captcha">Captcha</label>
                <input class="form-control" @bind="_model.Captcha" type="text" />
            </div>

            <div class="mb-1">
                <button class="btn btn-success">Register</button>
            </div>
        </EditForm>
    </div>
    <div class="row-cols-3"></div>
</div>

@code {
    private SignUpDto _model = SignUpDto.Empty;
    private async Task SubmitASync() {
        Console.WriteLine(_model);
        var accountResult = await _account.RegisterAsync(_model);
        var authState = (AuthStateProvider)_authStateProvider;
        await authState.SetStateAsync(accountResult);
        _nav.NavigateTo("/", forceLoad : true);
    }
}
