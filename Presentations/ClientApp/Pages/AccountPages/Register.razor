@page "/Accounts/Register"

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _nav
@inject IAccountService _account

<div class="row">
    <div class="row-cols-3"></div>
    <div class="row-cols-6">
        <EditForm Enhance Model="_model" OnValidSubmit="onRegisterAsync">
            <AntiforgeryToken />
            <div class="form-group mb-1">
               <label class="form-label">Email</label>
                <input class="form-control" @bind="_model.Email" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >UserName</label>
                <input class="form-control" @bind="@_model.UserName" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label">Gender</label>
                <select class="form-select" @bind="@_model.Gender">
                    <option selected value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >Password</label>
                <input class="form-control" @bind="_model.Password" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" >ConfirmedPassword</label>
                <input class="form-control" @bind="_model.ConfirmedPassword" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" for="@_model.BirthDate">BirthDate</label>
                <input class="form-check" @bind="@_model.BirthDate" type="datetime" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label" for="@_model.Captcha">Captcha</label>
                <input class="form-control" @bind="_model.Captcha" type="text" />
            </div>

            <div class="mb-1">
                <button class="btn btn-success">Register</button>
            </div>
        </EditForm>
    </div>
    <div class="row-cols-3"></div>
</div>

<div>

    @if(Errors.Any()) {
        <table class="table table-bordered table-striped mt-3 mb-1">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Message</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var item in Errors) {
                    <tr>
                        <td>@item.Code</td>
                        <td>@item.Message</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private List<CodeMessage> Errors { get; set; } = [];
    private const string navToPage = "/";

    private SignUpDto _model = SignUpDto.Empty;
    private async Task onRegisterAsync() {
        try {
            Errors.Clear();
            var authState = (AuthStateProvider)_authStateProvider;
            await authState.SetStateAsync(null);
            var accountResult = await _account.RegisterAsync(_model);
            await authState.SetStateAsync(accountResult);

            if(accountResult.Status == ResultStatus.Succeed) {
                _nav.NavigateTo(navToPage , forceLoad: true);
                return;
            }
            IsNotConfirmedEmail(accountResult.Messages);
        }
        catch(Exception ex) {
            Console.WriteLine(new { page = "Register", Models = _model });
            Console.WriteLine(ex.Message);
        }

    }
    private void IsNotConfirmedEmail(List<CodeMessage>? messages) {
        if(messages  is null || !messages.Any()) {
            Errors.Add(new("Unknown_Error" , "Some things is wrong."));
            return;
        }
        if(messages.Count() == 1 && messages.Any(x => x.Code == TokenBlockReason.NotConfirmedEmail)) {
            _nav.NavigateTo(navToPage , forceLoad: true);
            return;
        }
        else {
            Errors.AddRange(messages);
        }
    }

}
