@page "/Accounts/ForgotPassword"

@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authStateProvider
@inject IPasswordManagerService _passwordManager


<div class="page_row">
    <div class="col_form">
        <EditForm id="forget_password_id" Enhance Model="_model" OnValidSubmit="OnForgotPasswordAsync">
            <div class="form-group mb-1">
                <label class="form-label">Email</label>
                <input style="width:300px;" class="form-control" @bind="_model.Email" />
            </div>
        </EditForm>
        <div class="captcha_row">
            <Captcha @ref="captchaPage" Model="_captchaModel" OnChangedModel="HandleCaptchaChange" />
        </div>
        <div class="mb-1 form_btns">
            <button type="submit" form="forget_password_id" class="btn btn-primary">Forgot Password</button>
        </div>
    </div>
    <div class="col_code_messages">
        @if(Errors.Any()) {
            <table class="table table-bordered table-striped" style="width:100%;height:100%;">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var item in Errors) {
                        <tr>
                            <td>@item.Code</td>
                            <td>@item.Message</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


@code {

    private List<CodeMessage> Errors { get; set; } = [];
    private const string navToPage = "/";
    private CaptchaModel _captchaModel = CaptchaModel.Empty;
    private ForgotPasswordDto _model = new();
    private Captcha captchaPage;

    private void HandleCaptchaChange(CaptchaModel model) => _captchaModel = model;
    private async Task RefreshCaptchaAsync() => await captchaPage.RefreshAsync();
    private bool CheckCaptchaStatus => CaptchaStatus.Succeed == _captchaModel.Status ? true : false;


   

    private async Task OnForgotPasswordAsync() {
        Errors.Clear();
        if(!CheckCaptchaStatus) {
            Errors.Add(ResultMessage.InvalidCaptcha);
            await RefreshCaptchaAsync();
            return;
        }
        var result = await _passwordManager.ForgotAsync(_model.Email);
        if(result.Status == ResultStatus.Failed) {
            Errors.AddRange(result.Messages);
        }
        else {
            _navManager.NavigateTo("/Accounts/ResetPassword");
        }        
    }
}


