@page "/Accounts/ResetPassword/{email}/{token}"
@using Shared.Auth.Models

@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authStateProvider
@inject IPasswordManagerService _passwordManager

<div class="row">
    <div class="cols-2"></div>
    <div class="col-8">

        <EditForm Enhance Model="model" OnValidSubmit="OnResetPasswordAsync">

            <div class="form-group mb-1">
                <label class="form-label">Token</label>
                <input class="form-control" @bind="model.Token" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label">Email</label>
                <input class="form-check" @bind="model.Email" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label">Password</label>
                <input class="form-check" @bind="model.Password" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label">ConfirmPassword</label>
                <input class="form-check" @bind="model.ConfirmPassword" type="password" />
            </div>

            <div>
                <button class="btn btn-primary">Login</button>
                <button class="btn btn-secondary" @onclick="@GotToHome">Home</button>
            </div>
        </EditForm>

    </div>
    <div class="cols-2"></div>
</div>

@code {
    private ResetPasswordDto model = ResetPasswordDto.Empty;

    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public string Token { get; set; }

    private List<CodeMessage> Errors = new();

    protected override void OnInitialized() {
        model.Token = Token;
        model.Email = Email;
    }
    private async Task OnResetPasswordAsync() {
        var accountResult = await _passwordManager.ResetAsync(model);
        if(accountResult.Status == ResultStatus.Failed) {
            Errors.AddRange(accountResult.Messages);
        }
        else {
            _navManager.NavigateTo("Dashboard");
        }
    }

    private void GotToHome() => _navManager.NavigateTo("/");
}
