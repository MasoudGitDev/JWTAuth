@page "/Accounts/ResetPassword/{email}/{token}"

@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authStateProvider
@inject IPasswordManagerService _passwordManager

<div class="page_row">
    <div class="col_form">
        <EditForm id="reset_password_id" Enhance Model="model" OnValidSubmit="OnResetPasswordAsync">  
            <div class="form-group mb-1">
                <label class="form-label">New Password</label>
                <input class="form-control" style="width:300px;" @bind="model.Password" type="text" />
            </div>

            <div class="form-group mb-1">
                <label class="form-label">ConfirmPassword</label>
                <input class="form-control" style="width:300px;" @bind="model.ConfirmPassword" type="password" />
            </div>
        </EditForm>
        <div class="captcha_row">
            <Captcha @ref="captchaPage" Model="_captchaModel" OnChangedModel="HandleCaptchaChange" />
        </div>
        <div class="mb-1 form_btns">
            <button type="submit" form="reset_password_id" class="btn btn-primary">Apply</button>
            <button class="btn btn-secondary" @onclick="@GotToHome">Cancel</button>
        </div>
    </div>
    <div class="col_code_messages">
        @if(Errors.Any()) {
            <table class="table table-bordered table-striped" style="width:100%;height:100%;">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var item in Errors) {
                        <tr>
                            <td>@item.Code</td>
                            <td>@item.Message</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


@code {

    private List<CodeMessage> Errors { get; set; } = [];
    private const string navToPage = "/";
    private CaptchaModel _captchaModel = CaptchaModel.Empty;
    private ForgotPasswordDto _model = new();
    private Captcha captchaPage;

    private void HandleCaptchaChange(CaptchaModel model) => _captchaModel = model;
    private async Task RefreshCaptchaAsync() => await captchaPage.RefreshAsync();
    private bool CheckCaptchaStatus => CaptchaStatus.Succeed == _captchaModel.Status ? true : false;

    private ResetPasswordDto model = ResetPasswordDto.Empty;

    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public string Token { get; set; }

    protected override void OnInitialized() {
        model.Token = Token;
        model.Email = Email;
    }
    private async Task OnResetPasswordAsync() {
        Errors.Clear();
        if(!CheckCaptchaStatus) {
            Errors.Add(ResultMessage.InvalidCaptcha);
            await RefreshCaptchaAsync();
            return;
        }
        var accountResult = await _passwordManager.ResetAsync(model);
        if(accountResult.Status == ResultStatus.Failed) {
            Errors.AddRange(accountResult.Messages);
        }
        else {
            _navManager.NavigateTo("Dashboard");
        }
    }

    private void GotToHome() => _navManager.NavigateTo("/");
}
