@using global::Shared.Auth.Constants.ApiAddresses
@inject ICaptchaManagerService _captchaService;

<EditForm id="captcha_form_id" Enhance Model="Model" OnValidSubmit="OnValidateAsync">
    <div class="captcha">
        <div class="captcha_server">
            <div class="captcha_img_container">
                <img class="captcha_img" src="@($"data:image/png;base64,{Model.Image}")" alt="Captcha Image" />
            </div>            
            <div class="captcha_btn">
                <button type="button" class="captcha_btn_icon" @onclick="OnRefreshAsync">
                    <i class="fa fa-refresh" aria-hidden="true"></i>
                </button>

            </div>
        </div>        
        <div class="captcha_client">
            <input class="captcha_input" @bind="Model.UserInput" />
            <button class="captcha_status" disabled="@(Model.Status==CaptchaStatus.Succeed)"
                    form="captcha_form_id" >
                <i class="@Status"></i>
            </button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public CaptchaModel Model { get; set; } = CaptchaModel.Empty;

    [Parameter]
    public EventCallback<CaptchaModel> OnChangedModel { get; set; }

    protected override async Task OnInitializedAsync() {
        try {
            (Model.FileName, Model.Image) = await _captchaService.GenerateAsync();
            await OnChangedModel.InvokeAsync(Model);
        }
        catch(Exception ex) {
            Console.WriteLine(new { code = "CaptchaError" , ex.Message });
        }

    }

    private async Task OnValidateAsync() {
        var codeMessage = await _captchaService.ValidateAsync(CaptchaValidationDto.New(Model.FileName, Model.UserInput));
        if(codeMessage.Code == ResultMessage.ValidCaptcha.Code) {
            Model.Status = CaptchaStatus.Succeed;
        }
        else {

            Model.Status = CaptchaStatus.Failed;
        }
        await OnChangedModel.InvokeAsync(Model);
    }

    private async Task OnRefreshAsync() {
        (Model.FileName, Model.Image) = await _captchaService.GenerateAsync();
        Model.Status = CaptchaStatus.None;
        Model.UserInput = string.Empty;
        await OnChangedModel.InvokeAsync(Model);
    }

    private string Status => Model.Status switch {
        CaptchaStatus.None => "fa-regular fa-circle-question",
            CaptchaStatus.Succeed => "fa-solid fa-square-check",
            CaptchaStatus.Failed => "fa-solid fa-square-xmark",
            _ => "fa-regular fa-question"
        };    

}
