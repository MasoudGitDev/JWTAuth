@page "/Settings/ChangePassword"

@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authStateProvider
@inject IPasswordManagerService _passwordManager

<div>
    <AuthorizeView Context="authContext" >
        <Authorized>
            <div class="row">
                <div class="col-6">
                    <EditForm Enhance Model="_model" OnValidSubmit="ChangePasswordAsync">
                        <div class="form-group mb-1">
                            <label class="form-label">Current Password :</label>
                            <input class="form-control" @bind="_model.CurrentPassword" />
                        </div>
                        <div class="form-group mb-1">
                            <label class="form-label">New Password :</label>
                            <input class="form-control" @bind="_model.NewPassword" />
                        </div>
                        <div class="form-group mb-1">
                            <label class="form-label">Confirm New Password :</label>
                            <input class="form-control" @bind="_model.ConfirmNewPassword" />
                        </div>
                        <div class="mb-1">
                            <button class="btn btn-outline-primary">Change</button>
                            <button class="btn btn-outline-secondary">Return</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private ChangePasswordDto _model =  ChangePasswordDto.Empty;

    private async Task ChangePasswordAsync() {
        var accountResult = await _passwordManager.ChangeAsync(_model);
        var authState = (AuthStateProvider)_authStateProvider;
        await authState.SetStateAsync(accountResult);
        _navManager.NavigateTo("Settings");
    }

}
